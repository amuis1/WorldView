;; -*-scheme-*-
;; dueca.cnf: created with DUECA version 0.14.23
;; Created on: Thu Aug 20 14:49:44 2009
;;; parameter defining cooperation with other nodes
(define this-node-id 1)                ; id of the current node
(define no-of-nodes 2)                 ; total number of nodes used
(define send-order 1)                  ; order/prio in send cycle

;;; parameter defining real-time behaviour
(define highest-manager 3)             ; max priority of activities
(define run-in-multiple-threads? #t)   ; test with #f with threading problems
(define rt-sync-mode 3)                ; 0=sigwait, good for Linux master
                                       ; 1=select, portable
                                       ; 2=nanosleep, good for QNX/Linux slave
                                       ; 3=rtc, good for (old) Linux slave
                                       ; 4=MsgReceive, good for QNX master
                                       ; 5=real time clock, Xenomai 
                                       ; 6=rt_sleep + slave the video sync

;;; automatic re-definition of rt-sync-mode in some cases
(use-modules (ice-9 regex))
(if (regexp-match? (string-match "-rt[0-9]+$" (utsname:release (uname))))
    (define rt-sync-mode 2))           ; nanosleep for preempt_rt kernels
(if (regexp-match? (string-match "xenomai" (utsname:release (uname))))
    (define rt-sync-mode 5))	       ; xenomai-specific mode

(define graphic-interface "glut")       ; selection of interface
                                       ; "gtk", "none" or "glut"

;;; parameters defining "size" of the time. Note that all nodes should have
;;; the same compatible-increment, and for all nodes 
;;; tick-time-step/tick-base-increment should be the same
(define tick-base-increment 20)        ; logical increment of time, each tick
(define tick-compatible-increment 20)  ; same, but used at start-up
(define tick-time-step 0.01)           ; time step for each tick

;;; parameter for communication using multicast
(define if-address "192.168.2.3")   ; address of own ip interface
(define mc-address "224.0.0.1")        ; multicast address
(define mc-port 7500)                  ; multicast port
(define packet-size 4096)              ; size of packets
                                       ; or size of areas in scram comm
(define out-packet-size packet-size)   ; output packet size UDP
(define bulk-max-size (* 128 1024))    ; max size of bulk messages
(define comm-prio-level 2)             ; priority communication process
(define unpack-prio-level 1)           ; priority unpacking incoming data
(define bulk-unpack-prio-level 1)      ; priority unpacking bulk data

;;; adjusting the output packet size for QNX
(if (regexp-match? (string-match "QNX" (utsname:sysname (uname))))
    (define out-packet-size (min packet-size 1450)))

;;; choice for the communication. Note that only one of the switches
;;; below may be true, and that they must be false when only one node is 
;;; used
(define use-ip-comm? #t)               ; if true, use ethernet
(define use-scram-comm? #f)            ; if true, use scramnet

;;; -------------------------------------------------------------------

;;;  0 - A list to assemble references to dueca objects
(define (make-extender local-list)
  (lambda (object)
    (set! local-list (append local-list (list object)))))
(define dueca-list (make-extender (list )))

;;;  1 - ObjectManager. This enables named objects to be created,
;;;      and allows query of the node id and number of nodes
(dueca-list
 (make-object-manager 'node-id        this-node-id 
		      'no-of-nodes    no-of-nodes))

;;;  2 - the environment. The environment will create the necessary
;;;      number of activity managers, so activities may now be
;;;      scheduled. From this point on it is also possible to create
;;;      activities
(dueca-list
 (make-environment 'multi-thread      run-in-multiple-threads? 
		   'highest-priority  highest-manager 
		   'graphic-interface graphic-interface))

;;; 2c - now priority specs can be made
(define comm-prio                      ; priority communication process
  (make-priority-spec 'priority       comm-prio-level 
		      'order          0))            
(define unpack-prio                    ; priority unpacking incoming data
  (make-priority-spec 'priority       unpack-prio-level 
		      'order          0))            
(define bulk-unpack-prio               ; priority unpacking bulk data
  (make-priority-spec 'priority       bulk-unpack-prio-level 
		      'order          0))  ; priorityspecs

;;;  3 - Packers, and a packer manager. Packers are passive
;;;      objects, accessed directly, and provide the configuration
;;;      data for remote communication. The unpackers use an
;;;	 activity, and therefore must start after the environment
(if use-ip-comm?
    (list
     (define pkt (make-packer))
     (define upkt (make-unpacker       'priority-spec unpack-prio))
     (define fpkt (make-fill-packer    'buffer-size   bulk-max-size))
     (define fupkt (make-fill-unpacker 'priority-spec bulk-unpack-prio
				       'buffer-size   bulk-max-size))
     )
  )

(if use-scram-comm?
    (list
     (define pkt 
       (make-reflective-packer        'buffer-size    1024))
     (define upkt 
       (make-reflective-unpacker      'buffer-size    1024 
				      'priority-spec  unpack-prio))
     (define fill-timing 
       (make-time-spec                'validity-start 0 
				      'period    tick-compatible-increment))
     (define fpkt 
       (make-reflective-fill-packer   'buffer-size    bulk-max-size 
				      'packet-size    500 
				      'set-timing     fill-timing))))

;;; the packer manager keeps an inventory of all packers for transport to 
;;; other nodes. The three arguments are a fill (bulk) packer, a normal packer
;;; and (if possible) a high-priority packer
(if (> no-of-nodes 1)
    (dueca-list (make-packer-manager 
		 'add-set (make-packer-set fpkt pkt pkt)
		 'add-set (make-packer-set fpkt pkt pkt)
		 'add-set (make-packer-set fpkt pkt pkt)
		 'add-set (make-packer-set fpkt pkt pkt)
		 'add-set (make-packer-set fpkt pkt pkt)
		 'add-set (make-packer-set fpkt pkt pkt)
		 'add-set (make-packer-set fpkt pkt pkt)
		 'add-set (make-packer-set fpkt pkt pkt)
		 'add-set (make-packer-set fpkt pkt pkt)))
  (dueca-list (make-packer-manager)))   ; this one for zero nodes

;;;  4 - The channel manager. From now on channel-using objects can
;;;      be created.
(dueca-list (make-channel-manager))

;;; definition of the scramnet unpacker is delayed, because it will use a
;;; normal channel and needs the channel manager
(if use-scram-comm?
    (define fupkt 
      (make-reflective-fill-unpacker    'buffer-size    bulk-max-size)))

;;;  5 - The ticker. A channel-using object! From now on
;;;      ticker-using objects can be created
(dueca-list (make-ticker  'base-increment           tick-base-increment
	    		  'compatible-increment     tick-compatible-increment
			  'time-step                tick-time-step
			  'priority                 highest-manager
			  'sync-mode                rt-sync-mode))

;;;  6 - communication hardware accessors. These may use the ticker
;;;      or channels to trigger activity.
(if use-ip-comm?
    (dueca-list 
     (make-ip-multicast-accessor
      'packer pkt                     ; packer 
      'unpacker upkt                  ; unpacker 
      'output-buffer-size out-packet-size ; for QNX, keep this to 1450
      'no-output-buffers 5            ; need a few
      'input-buffer-size packet-size  ; >= send buffers of peers
      'no-input-buffers 50            ; NB, with n senders, each 
                                      ; cycle fills n-1 buffers 
      'mc-address mc-address          ; ip address
      'port mc-port                   ; base port, will use range
      'if-address if-address          ; of own interface
      'timeout 50000	              ; usec
      'n-senders no-of-nodes          ; 
      'send-order send-order          ; # in send sequence.
      'time-spec 
      (make-time-spec 
       0 tick-compatible-increment)   ; timing
      'priority comm-prio             ; priority comm process
      'delay-estimator                ; delay estimation
      (make-transport-delay-estimator 
       'const-delay 50.1              ; initial estimate set-up time
       'delay-per-byte 1.1            ; initial estimate, [us]
       's-v 20.1                      ; s.d. observation, 10 us
       's-const-delay 10.1            ; s.d. fixed delay
       's-delay-per-byte 0.1          ; s.d. delay per byte
       'innov-max 100.1               ; cap on innovation step [us]
       )
      'fill-packer fpkt               ; packer for bulk data
      'fill-unpacker fupkt            ; unpacker bulk
      )
     )
  )     

(if use-scram-comm?
    (dueca-list
     (make-scramnet-accessor
      'no-parties no-of-nodes  ;
      'my-index   send-order   ; no parties, my id
      'reflect-area-id "scram" ; name for the area
      'key (+ send-order 128)  ; shmget key, not used here, 
                               ; except by QNX nodes for scramnet id
      'area-size (* 256 1024)  ; area size, in WORDS!
      'combuff-size packet-size ; each block, also in words
      'packer pkt              ; packer
      'unpacker upkt           ; unpacker
      'watchtime               ; time spec watchertail 
      (make-time-spec 0 tick-compatible-increment) 
      'clocktime               ; time spec clock writer
      (make-time-spec 0 tick-compatible-increment) 
      'priority comm-prio      ; priority 
      'fill-packer fpkt
      'fill-unpacker fupkt     ; fill packer, unpacker 
      'direct-comm #t          ; let stream channels on shared mem
      )
     )
  )


;;;  7 - Pass control to the environment again.
;;;      It will now invoke a completeCreation method
;;;      from the previously created singletons (0, 1, 3, 4, 5, 6) to 
;;;      give these the opportunity to do additional initialisation
;;;      Then it creates the EntityManager for this node

